import asyncio
from aiogram import Bot, Dispatcher, methods, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from uuid import UUID
from db import DB
from cfg import *
import http3

dp = Dispatcher()
bot = Bot(token=TGBOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))

def check_user_auth(user_id):
    db = DB()
    try:
        get_adv_id(user_id)
        result = True
    except Exception as e:
        result = False
    db.end()
    return result

def get_adv_id(user_id):
    db = DB()
    adv_id = db.redis_con.get(f"tgbot_auth_{user_id}").decode()
    db.end()
    return adv_id

def get_state_for_user(user_id):
    db = DB()
    try:
        result = db.redis_con.get(f"tgbot_state_{user_id}").decode()
    except Exception as e:
        result = None
    db.end()
    return result

def set_state_for_user(user_id, state):
    db = DB()
    try:
        if state == None:
            db.redis_con.delete(f"tgbot_state_{user_id}")
        else:
            db.redis_con.set(f"tgbot_state_{user_id}", state)
    except Exception as e:
        pass
    db.end()

def user_delete_all_temp(user_id):
    db = DB()
    for key in db.redis_con.scan_iter(f"tgbot_temp_{user_id}_*"):
        db.redis_con.delete(key)
    db.end()

def user_temp_set(user_id, key, val):
    db = DB()
    db.redis_con.set(f"tgbot_temp_{user_id}_{key}", val)
    db.end()

def user_temp_get(user_id, key):
    db = DB()
    try:
        result = db.redis_con.get(f"tgbot_temp_{user_id}_{key}").decode()
    except Exception as e:
        result = None
    db.end()
    return result

default_kb_arr = [
    [types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", ), types.KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")],
    [types.KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º")],
    [types.KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")],
]
default_kb = types.ReplyKeyboardMarkup(keyboard=default_kb_arr, resize_keyboard=True)

cancel_kb_arr = [
    [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
]
cancel_kb = types.ReplyKeyboardMarkup(keyboard=cancel_kb_arr, resize_keyboard=True)

no_kb = types.ReplyKeyboardRemove()

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    if not check_user_auth(message.from_user.id):
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π UUID.", reply_markup=no_kb)
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å üòÅ", reply_markup=default_kb)

@dp.message()
async def on_message(message: Message) -> None:
    client = http3.AsyncClient()

    if not check_user_auth(message.from_user.id):
        # –≤–∞–ª–∏–¥–∏—Ä—É–µ–º UUID
        try:
            adv_uuid = str(UUID(message.text))
        except Exception as e:
            await message.answer(f"–≠—Ç–æ –Ω–µ UUID.", reply_markup=no_kb)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å
        await message.answer("–ò–¥—ë—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...", reply_markup=no_kb)
        r = await client.get(f"http://{MAINAPI_HOST}/tgbot/check_if_adv_exists/{adv_uuid}")
        r_json = r.json()
        adv_uuid_exists = r_json["exists"]

        if adv_uuid_exists:
            # –°—É—â–µ—Å—Ç–≤—É–µ—Ç
            db = DB()
            db.redis_con.set(f"tgbot_auth_{message.from_user.id}", adv_uuid)
            db.end()
            set_state_for_user(message.from_user.id, None)
            user_delete_all_temp(message.from_user.id)
            await message.answer(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, –∫–∞–∫ {r_json["name"]}!", parse_mode=ParseMode.HTML, reply_markup=default_kb)
        else:
            # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await message.answer("–¢–∞–∫–æ–≥–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=no_kb)
        return

    user_id = message.from_user.id
    user_state = get_state_for_user(user_id)

    # –û—Ç–º–µ–Ω–∞
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=default_kb)
        set_state_for_user(user_id, None)
        user_delete_all_temp(user_id)
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if message.text == "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" and user_state == None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in0")
        return
    if user_state == "adv_create_in0":
        user_temp_set(user_id, "ad_title", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in1")
        return
    if user_state == "adv_create_in1":
        user_temp_set(user_id, "ad_text", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–∫–∞–∑–æ–≤", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in2")
        return
    if user_state == "adv_create_in2":
        user_temp_set(user_id, "impressions_limit", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in3")
        return
    if user_state == "adv_create_in3":
        user_temp_set(user_id, "clicks_limit", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø–æ–∫–∞–∑", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in4")
        return
    if user_state == "adv_create_in4":
        user_temp_set(user_id, "cost_per_impression", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in5")
        return
    if user_state == "adv_create_in5":
        user_temp_set(user_id, "cost_per_click", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in6")
        return
    if user_state == "adv_create_in6":
        user_temp_set(user_id, "start_date", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–æ–∫–∞–∑–∞", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in7")
        return
    if user_state == "adv_create_in7":
        user_temp_set(user_id, "end_date", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—ã (MALE, FEMALE, ALL), –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (\"-\", –µ—Å–ª–∏ –ª—é–±–æ–π)", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in8")
        return
    if user_state == "adv_create_in8":
        if message.text != "-": user_temp_set(user_id, "gender", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (\"-\", –µ—Å–ª–∏ –ª—é–±–æ–π)", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in9")
        return
    if user_state == "adv_create_in9":
        if message.text != "-": user_temp_set(user_id, "age_from", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (\"-\", –µ—Å–ª–∏ –ª—é–±–æ–π)", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in10")
        return
    if user_state == "adv_create_in10":
        if message.text != "-": user_temp_set(user_id, "age_to", message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (\"-\", –µ—Å–ª–∏ –ª—é–±–∞—è)", reply_markup=cancel_kb)
        set_state_for_user(user_id, "adv_create_in11")
        return
    if user_state == "adv_create_in11":
        if message.text != "-": user_temp_set(user_id, "location", message.text)
        try:
            json = {
                "impressions_limit": int(user_temp_get(user_id, "impressions_limit")),
                "clicks_limit": int(user_temp_get(user_id, "clicks_limit")),
                "cost_per_impression": float(user_temp_get(user_id, "cost_per_impression")),
                "cost_per_click": float(user_temp_get(user_id, "cost_per_click")),
                "ad_title": user_temp_get(user_id, "ad_title"),
                "ad_text": user_temp_get(user_id, "ad_text"),
                "start_date": int(user_temp_get(user_id, "start_date")),
                "end_date": int(user_temp_get(user_id, "end_date")),
                "targeting": {}
            }
            if user_temp_get(user_id, "gender") != None: json["targeting"]["gender"] = user_temp_get(user_id, "end_date")
            if user_temp_get(user_id, "age_from") != None: json["targeting"]["age_from"] = int(user_temp_get(user_id, "age_from"))
            if user_temp_get(user_id, "age_to") != None: json["targeting"]["age_to"] = int(user_temp_get(user_id, "age_to"))
            if user_temp_get(user_id, "location") != None: json["targeting"]["location"] = user_temp_get(user_id, "location")
        except Exception as e:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", reply_markup=cancel_kb)
            raise e
        try:
            r = await client.post(f"http://{MAINAPI_HOST}/advertisers/{get_adv_id(user_id)}/campaigns", json=json)
            if r.status_code == 400:
                await message.answer(f"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=default_kb)
            elif r.status_code == 201:
                await message.answer(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {r.json()['campaign_id']} —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=default_kb)
            else:
                raise Exception(f"Not valid code! {r.status_code}")
        except Exception as e:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", reply_markup=default_kb)
            raise e
        set_state_for_user(user_id, None)
        user_delete_all_temp(user_id)
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è" and user_state == None:
        r = await client.get(f"http://{MAINAPI_HOST}/advertisers/{get_adv_id(user_id)}/campaigns")
        r_json = r.json()
        
        mod_status_to_text = {
            "pending": "–æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é... ‚è≥",
            "succesful": "–ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úÖ",
            "failed": "–Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚ùå"
        }

        for i in r_json:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"ad_delete_{i['campaign_id']}"),
                    types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"ad_edit_{i['campaign_id']}"),
                ],
                [types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"ad_stats_{i['campaign_id']}")],
                [types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data=f"ad_alldata_{i['campaign_id']}")]
            ])
            msg = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {i['campaign_id']}\n\"{i['ad_title']}\""
            try:
                msg += f"\n–°—Ç–∞—Ç—É—Å: {mod_status_to_text[i['moderation_status']]}"
            except Exception as e:
                pass
            await message.answer(msg, parse_mode=ParseMode.HTML, reply_markup=kb)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
    if message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º" and user_state == None:
        r = await client.get(f"http://{MAINAPI_HOST}/stats/advertisers/{get_adv_id(user_id)}/campaigns")
        r_json = r.json()
        msg = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º:\n\
–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {r_json['impressions_count']}\n\
–ü–µ—Ä–µ—Ö–æ–¥—ã: {r_json['clicks_count']}\n\
–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {round(r_json['conversion'], 2)}%\n\
–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–∫–∞–∑—ã: {round(r_json['spent_impressions'], 2)}\n\
–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥—ã: {round(r_json['spent_clicks'], 2)}\n\
–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {round(r_json['spent_total'], 2)}"
        await message.answer(msg, parse_mode=ParseMode.HTML)
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if user_state == "adedit":
        ad_id = user_temp_get(user_id, "ad_id")
        adv_id = get_adv_id(user_id)
        field = user_temp_get(user_id, "field")

        client = http3.AsyncClient()

        try:
            r = await client.get(f"http://{MAINAPI_HOST}/advertisers/{adv_id}/campaigns/{ad_id}")
            campaign = r.json()
            del campaign["campaign_id"]
            del campaign["advertiser_id"]
            try:
                del campaign["moderation_status"]
            except Exception as e:
                pass
            if not "targeting" in campaign.keys(): campaign["targeting"] = {}

            if field == "imprlimit":
                campaign["impressions_limit"] = int(message.text)
            if field == "clklimit":
                campaign["clicks_limit"] = int(message.text)
            if field == "imprcost":
                campaign["cost_per_impression"] = float(message.text)
            if field == "clkcost":
                campaign["cost_per_click"] = float(message.text)
            if field == "title":
                campaign["ad_title"] = message.text
            if field == "text":
                campaign["ad_text"] = message.text
            if field == "startdate":
                campaign["start_date"] = int(message.text)
            if field == "enddate":
                campaign["end_date"] = int(message.text)
            if field == "gender":
                if message.text == "-":
                    campaign["targeting"]["gender"] = None
                else:
                    campaign["targeting"]["gender"] = message.text
            if field == "location":
                if message.text == "-":
                    campaign["targeting"]["location"] = None
                else:
                    campaign["targeting"]["location"] = message.text
            if field == "agefrom":
                if message.text == "-":
                    campaign["targeting"]["age_from"] = None
                else:
                    campaign["targeting"]["age_from"] = int(message.text)
            if field == "ageto":
                if message.text == "-":
                    campaign["targeting"]["age_to"] = None
                else:
                    campaign["targeting"]["age_to"] = int(message.text)

            r = await client.put(f"http://{MAINAPI_HOST}/advertisers/{adv_id}/campaigns/{ad_id}", json=campaign)
            if r.status_code == 200:
                await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=default_kb)
            elif r.status_code == 400:
                await message.answer(f"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=default_kb)
            else:
                raise Exception(f"Not valid code! {r.status_code}")
        except Exception as e:
            print(e)
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", reply_markup=default_kb)

        set_state_for_user(user_id, None)
        user_delete_all_temp(user_id)

        return

    # –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    if message.text == "–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è" and user_state == None:
        db = DB()
        db.redis_con.delete(f"tgbot_auth_{message.from_user.id}")
        set_state_for_user(message.from_user.id, None)
        user_delete_all_temp(message.from_user.id)
        db.end()
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π UUID.", reply_markup=no_kb)
        return

    if user_state == None:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫", reply_markup=default_kb)

@dp.callback_query(F.data.startswith("addelete_"))
async def callbacks_ad(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    adv_id = get_adv_id(user_id)

    arr = callback.data.split("_")
    action = arr[1]
    ad_id = arr[2]

    client = http3.AsyncClient()

    if action == "yes":
        r = await client.delete(f"http://{MAINAPI_HOST}/advertisers/{adv_id}/campaigns/{ad_id}")
        if r.status_code == 204:
            await callback.message.answer(text=f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} —É–¥–∞–ª–µ–Ω–æ!", parse_mode=ParseMode.HTML)
        else:
            await callback.message.answer(text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", parse_mode=ParseMode.HTML)
            raise Exception(f"Status code not 204! {r.status_code}")
    else:
        pass
    await callback.message.delete()
    
    await callback.answer()

@dp.callback_query(F.data.startswith("adedit_"))
async def callbacks_adedit(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    adv_id = get_adv_id(user_id)

    arr = callback.data.split("_")
    action = arr[1]
    ad_id = arr[2]

    if action == "cancel":
        await callback.message.delete()
    else:
        set_state_for_user(user_id, "adedit")
        user_temp_set(user_id, "field", action)
        user_temp_set(user_id, "ad_id", ad_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=cancel_kb)

    await callback.answer()

def get_val_or_none(d:dict, k):
    if k in d.keys():
        return d[k]
    return None

@dp.callback_query(F.data.startswith("ad_"))
async def callbacks_ad(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    adv_id = get_adv_id(user_id)

    arr = callback.data.split("_")
    action = arr[1]
    ad_id = arr[2]

    client = http3.AsyncClient()

    if action == "stats":
        r = await client.get(f"http://{MAINAPI_HOST}/stats/campaigns/{ad_id}")
        r_json = r.json()
        msg = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é \"{ad_id}\"\n\
–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {r_json['impressions_count']}\n\
–ü–µ—Ä–µ—Ö–æ–¥—ã: {r_json['clicks_count']}\n\
–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {round(r_json['conversion'], 2)}%\n\
–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–∫–∞–∑—ã: {round(r_json['spent_impressions'], 2)}\n\
–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥—ã: {round(r_json['spent_clicks'], 2)}\n\
–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {round(r_json['spent_total'], 2)}"
        await callback.message.answer(text=msg, parse_mode=ParseMode.HTML, reply_markup=default_kb)
    if action == "delete":
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–î–∞", callback_data=f"addelete_yes_{ad_id}"),
                    types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"addelete_no_{ad_id}"),
                ],
            ])
        await callback.message.answer(text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id}", parse_mode=ParseMode.HTML, reply_markup=kb)
    if action == "edit":
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–õ–∏–º–∏—Ç –ø–æ–∫–∞–∑–æ–≤", callback_data=f"adedit_imprlimit_{ad_id}"),
                types.InlineKeyboardButton(text="–õ–∏–º–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤", callback_data=f"adedit_clklimit_{ad_id}"),
            ],
            [
                types.InlineKeyboardButton(text="–¶–µ–Ω—É –∑–∞ –ø–æ–∫–∞–∑", callback_data=f"adedit_imprcost_{ad_id}"),
                types.InlineKeyboardButton(text="–¶–µ–Ω—É –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥", callback_data=f"adedit_clkcost_{ad_id}"),
            ],
            [
                types.InlineKeyboardButton(text="–ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data=f"adedit_title_{ad_id}"),
                types.InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data=f"adedit_text_{ad_id}"),
            ],
            [
                types.InlineKeyboardButton(text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data=f"adedit_startdate_{ad_id}"),
                types.InlineKeyboardButton(text="–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞", callback_data=f"adedit_enddate_{ad_id}"),
            ],
            [
                types.InlineKeyboardButton(text="–ü–æ–ª—ã", callback_data=f"adedit_gender_{ad_id}"),
                types.InlineKeyboardButton(text="–õ–æ–∫–∞—Ü–∏—é", callback_data=f"adedit_location_{ad_id}"),
            ],
            [
                types.InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç –æ—Ç", callback_data=f"adedit_agefrom_{ad_id}"),
                types.InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç –¥–æ", callback_data=f"adedit_ageto_{ad_id}"),
            ],
            [
                types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"adedit_cancel_{ad_id}")
            ]
        ])
        await callback.message.answer(text=f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", parse_mode=ParseMode.HTML, reply_markup=kb)

    if action == "alldata":
        r = await client.get(f"http://{MAINAPI_HOST}/advertisers/{adv_id}/campaigns/{ad_id}")
        campaign = r.json()
        msg1 = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {campaign['campaign_id']}:\n\
–õ–∏–º–∏—Ç –ø–æ–∫–∞–∑–æ–≤: {campaign['impressions_limit']}\n\
–õ–∏–º–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {campaign['clicks_limit']}\n\
–¶–µ–Ω–∞ –∑–∞ –ø–æ–∫–∞–∑: {campaign['cost_per_impression']}\n\
–¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥: {campaign['cost_per_click']}\n\
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {campaign['ad_title']}\n\
–¢–µ–∫—Å—Ç: {campaign['ad_text']}\n\
–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {campaign['start_date']}\n\
–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞: {campaign['end_date']}"
        msg2 = f"–¢–∞—Ä–≥–µ—Ç–∏–Ω–≥ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {campaign['campaign_id']}:"
        if get_val_or_none(campaign, "targeting") != None:
            if get_val_or_none(campaign["targeting"], "gender") != None:
                msg2 += f"\n–ü–æ–ª: {campaign['targeting']['gender']}"
            if get_val_or_none(campaign["targeting"], "age_from") != None:
                msg2 += f"\n–í–æ–∑—Ä–∞—Å—Ç –æ—Ç: {campaign['targeting']['age_from']}"
            if get_val_or_none(campaign["targeting"], "age_to") != None:
                msg2 += f"\n–í–æ–∑—Ä–∞—Å—Ç –¥–æ: {campaign['targeting']['age_to']}"
            if get_val_or_none(campaign["targeting"], "location") != None:
                msg2 += f"\n–õ–æ–∫–∞—Ü–∏—è: {campaign['targeting']['location']}"
        await callback.message.answer(msg1, parse_mode=ParseMode.HTML)
        await callback.message.answer(msg2, parse_mode=ParseMode.HTML, reply_markup=default_kb)

    await callback.answer()

async def main() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())